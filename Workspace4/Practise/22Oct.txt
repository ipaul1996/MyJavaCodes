TypedQuery<Account> q = em.createQuery(jpql, Account.class);
String = "update Account set balance = balance + 1? where name = ?2";
q.setParmeter(1, 500);
q.setParameter(2, "Ram");

@NamedQuery(name = "account.getBalance", query = "from Account where balance < :bal");

Query q = em.createNamedQuery("account.getBalance");

String nq = "select * from Account";

Query q = em.createNativeQuery(nq, Account.class);

@NamedNativeQuery(name = "account.AllAccount", query = "selecty * from Account", resultClass = "Account.class")

Query q = em.createNamedQuery("account.AllAccount");

GeneratedValue(strategy = GenerationType.AUTO)  ---> hibernate_sequence
GeneratedValue(strategy = GenerationType.IDENTITY) 
GeneratedValue(strategy = GenerationType.SEQUENCE)

@Embeddable
@Embedded

@Embedded
@AttributeOverrides({
	@AttributeOverride(name = "state", column = @Column(name = "Home_State"))
	@AttributeOverride(name = "city", column = @Column(name = "Home_City"))
	@AttributeOverride(name = "pincode", column = @Column(name = "Home_Pincode"))
})
private Address homeAddr;

@Embedded
@AttributeOverrides({
	@AttributeOverride(name = "state", column = @Column(name = "Office_State"))
	@AttributeOverride(name = "city", column = @Column(name = "Office_City"))
	@AttributeOverride(name = "pincode", column = @Column(name = "Office_Pincode"))
})
private Address officeAddr;

@ElementCollection
@Embedded
@JoinTable(name = "empAddress", joinColumns = @JoinColumn(name = "eid"))
private List<Address> addresses = new ArrayList<>();
creates another table with name employee_adresses and FK Column employee_eid if we don't use @JoinTable

<property name = "hibernate.show_sql" value = "true" />
<property name = "hibernate.hbm2ddl" value = "create" />
<property name = "hibernate.hbm2ddl" value = "update" />

@Table(name = "mystudent")
@Column(name = "sname")

@Trnasient

maven compiler source
Java Compiler maven plugin

Hibernate core mvn

mysql connector-mvn

META-INF
persistence.xml

Hibernate documentation

@ElementCollection(fetch = FetchType.EAGER)
@ElementCollection(fetch = FetchType.LAZY)

@OneToMany(cascade = CascaeType.ALL)
@JoinTable(name = "dept_emp", joinColumns = @JoinColumn(name = "did"), inverseJoinColumns = @JoinColumn(name = "eid"))
private List<Employee> employees = new ArrayList<>();

Departmen_employees
FK col ---> Department_deptId;
FK col ---> emps_empId;

@ManyToOne(cascade = CascadeType.ALL)
@joinColumn(name = "did")
private Department dept;

@ManyToMany(cascade = CascadeType.ALL, mappedBy = "courses")
private List<Student> students = new ArrayList<>();

@ManyToMany(cascade = CascadeType.ALL)
private List<Course> courses = new ArrayList<>();

Student
Course

Student_courses
(Student_sid
courses_cid)

Course_students
(Course_cid
students_sid)

@OneToOne(cascade = CascadeType.ALL)
private Employee emp;


@OneToOne(cascade = CascadeType.ALL)
private Department dept;


EntityManagerFactory emf = Persistence.createEntityManager("mismatch-unit");

EntityManager em = emf.createEntityManager();
Employee emp = em.find(Employee.class. 1);

em.getTransaction().begin();
em.persist(d1);
em.getTransaction().commit();

em.merge(d1);

em.close();








